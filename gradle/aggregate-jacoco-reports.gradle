//
// Gradle build fragment
//

// aggregate: https://docs.gradle.org/6.4.1/samples/sample_jvm_multi_project_with_code_coverage.html
//tasks.register("codeCoverageReport", JacocoReport) {
task codeCoverageReport(type: JacocoReport) {
  group       "verification"
  description "Creates aggregated Jacoco reports"

  // If a subproject applies the 'jacoco' plugin, add the result it to the report
  subprojects { subproject ->
    subproject.plugins.withType(JacocoPlugin).configureEach {
      subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->

        // don't continue unless this subproject has tests.
        if (!hasTests) return

        sourceSets subproject.sourceSets.main
        executionData(testTask)
      }

      // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
      // you may want to set up a task dependency between them as shown below.
      // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
      // may have a negative effect on the configuration time of your build.
      subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
        rootProject.tasks.codeCoverageReport.dependsOn(it)
      }
    }
  }

  // enable the different report types (html, xml, csv)
  reports {
    xml {
      required    = true
      destination file("${rootProject.buildDir}/jacoco/aggregated-code-coverage.xml")
    }

    html {
      required    = true
      destination file("${rootProject.buildDir}/reports/jacoco")
    }
  }
}

// vim:shiftwidth=2 softtabstop=2 expandtab
// EOF
